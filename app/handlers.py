from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
import app.keyboards as kb
import asyncio
import wikipedia

router = Router()
SEARCH_TYPES = ("Quick", "Select")
search = SEARCH_TYPES[0]


# /start handler
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(f"""üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.full_name}!

–ú–µ–Ω—è –∑–æ–≤—É—Ç ü§ñ <b>Wiki Bot</b> ‚Äî —è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ üìö <b>–í–∏–∫–∏–ø–µ–¥–∏–∏</b>!

üîç –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç–∞—Ç—å—é!

üìå –í–Ω–∏–∑—É —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å <b>—Ç–∏–ø –ø–æ–∏—Å–∫–∞</b>
–ñ–¥—É —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å! üòä
""",
parse_mode='HTML',
reply_markup=kb.main)


# Command handler
@router.message(Command("help"))
async def get_help(message: Message):
    await message.answer('‚ÑπÔ∏è –ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ, –∏ —è –ø–æ–∏—â—É —Å—Ç–∞—Ç—å—é –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏.')


# F (magic filter) handler
@router.message(F.text == '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫')
async def quick_search(message: Message):
    global search
    search = SEARCH_TYPES[0]
    await message.answer('‚úÖ –¢–∏–ø –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫')


@router.message(F.text == '–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π')
async def select_search(message: Message):
    global search
    search = SEARCH_TYPES[1]
    await message.answer('‚úÖ –¢–∏–ø –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω: –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π')


@router.message(F.text)
async def wiki_answer(message: Message):
    try:
        if search == SEARCH_TYPES[1]:
            # Maqola sarlavhalarini qidiradi
            result_list = await asyncio.to_thread(wikipedia.search, message.text)
            if result_list:
                result = "\n".join([f"‚Ä¢ {item}" for item in result_list])
            else:
                result = "üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            # To'liq maqola
            result = await asyncio.to_thread(wikipedia.summary, message.text)
        await message.answer(result)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")



# Photo handler
@router.message(F.photo)
async def get_photo(message: Message):
    await message.answer(f"üñºÔ∏è –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! ID: {message.photo[-1].file_id}")